import Router from "koa-router";
import autoGeneratedControllers from "../controllers/autoGeneratedControllers.js";
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';

export default function dynamicRoutes({database}) {
  const router = new Router();

  // Fetch the list of collections from the database
  database.getCollections().then((data) => {
    // Create routes for each collection
    Object.keys(data).forEach((entry) => {
      if (entry) {
        const controller = autoGeneratedControllers(database, entry);

        // Define the routes
        router.get(`/${entry}`, controller.get);
        router.get(`/${entry}/:id`, controller.get);
        router.post(`/${entry}`, controller.post);
        router.put(`/${entry}/:id`, controller.put);
        router.patch(`/${entry}/:id`, controller.patch);
        router.delete(`/${entry}/:id`, controller.del);
      }
    });
  });

      // Register route
      router.post('/register', async (ctx) => {
        const { username, password, id } = ctx.request.body;
        const hashedPassword = await bcrypt.hash(password, 10);


        const newUserId = id || await database.getMaxId('users') + 1;

        // Insert new user
        const newUser = await database.insert('users', { username, password: hashedPassword, id: newUserId });
        ctx.body = newUser;
      });
  
      // Login route
      router.post('/login', async (ctx) => {
        const { username, password } = ctx.request.body;
        const user = (await database.find('users', [['username', username]]))[0];

        console.log(user, 'user')

        if (!user) {
          ctx.throw(401, 'Invalid username');
        }
  
        // Verify the password
        const valid = await bcrypt.compare(password, user.password);
  
        if (valid) {
          const token = jwt.sign({ username }, 'your_secret_key');
          ctx.body = { token, user };
        } else {
          ctx.throw(401, 'Invalid username or password');
        }
      });


  // Return the routes middleware
  return router.routes();
}
